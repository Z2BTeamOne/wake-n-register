{"hfcExports": [
  {"Certificate":"Enrollment certificate."},
  {"Chain":"The class representing a chain with which the client SDK interacts."},
  {"ChainCodeCBE":"The ChainCodeCBE is used internal to the EventHub to hold chaincode event registration callbacks."},
  {"EventHub":"The EventHub is used to distribute events from a specific event source(peer)"},
  {"EventDeploySubmitted":"This is the object that is delivered as the result with the complete event from a Transaction object for a **deploy** operation."},
  {"EventDeployComplete":"This is the data that is delivered as the result with the submitted event from a Transaction object for an **invoke** operation."},
  {"EventInvokeSubmitted":"This is the object that is delivered as the result with the complete event from a Transaction object for a **invoke** operation."},
  {"EventInvokeComplete":"This is the object that is delivered as the result with the complete event from a Transaction object for a **query** operation."},
  {"EventQueryComplete":"This is the data that is delivered as the result with the error event from a Transaction object for any of the following operations: **deploy**, **invoke**, or **query**."},
  {"EventTransactionError":"<i>No description provided by SDK team</i>"},
  {"getChain":"Get a chain.  If it doesn't yet exist and 'create' is true, create it. <br/>@param {string} chainName The name of the chain to get or create. <br/>@param {boolean} create If the chain doesn't already exist, specifies whether to create it. @return {Chain} Returns the chain, or null if it doesn't exist and create is false."},
  {"GetTCertBatchRequest":"This is the object that is delivered as the result with the submitted event from a Transaction object for a **deploy** operation."},
  {"Member":"A member is an entity that transacts on a chain. Types of members include end users, peers, etc."},
  {"newChain":"Get a chain.  If it doesn't yet exist and 'create' is true, create it. <br/>@param {string} chainName The name of the chain to get or create. <br/>@param {boolean} create If the chain doesn't already exist, specifies whether to create it. @return {Chain} Returns the chain, or null if it doesn't exist and create is false."},
  {"newFileKeyValStore":"Create an instance of a FileKeyValStore."},
  {"Peer":"The Peer class represents a peer to which HFC sends deploy, invoke, or query requests."},
  {"PrivacyLevel":"<i>No description provided by SDK team</i>"},
  {"TCert":"<i>No description provided by SDK team</i>"},
  {"Transaction":"<i>No description provided by SDK team</i>"},
  {"TransactionContext":"A transaction context emits events 'submitted', 'complete', and 'error'. Each transaction context uses exactly one tcert."}
],
"hfcClasses":[
  {"Chain":[
    {"addPeer":"Add a peer given an endpoint specification. <br/>@param url The URL of the peer. <br/>@param opts Optional GRPC options. <br/>@returns {Peer} Returns a new peer."},
    {"enroll":"Enroll a user or other identity which has already been registered. If the user has already been enrolled, this will still succeed. <br/>@param name The name of the user or other member to enroll. <br/>@param secret The secret of the user or other member to enroll. <br/>@param cb The callback to return the user or other member."},
    {"register":"Register a user or other member type with the chain. <br/>@param registrationRequest Registration information. <br/>@param cb Callback with registration results"},
    {"registerAndEnroll":"Register and enroll a user or other member type. This assumes that a registrar with sufficient privileges has been set. <br/>@param registrationRequest Registration information. <br/>@params"},
    {"sendTransaction":"Send a transaction to a peer. <br/>@param tx A transaction <br/>@param eventEmitter An event emitter"},
    {"eventHubConnect":"Set and connect to the peer to be used as the event source."},
    {"eventHubDisconnect":"Disconnect from the peer used as the event source."},
    {"getEventHub":"Get the eventHub service associated this chain. <br/>@returns {eventHub} Return the current eventHub service, or undefined if not set."},
    {"getDeployWaitTime":"Get the deploy wait time in seconds."},
    {"setDeployWaitTime":"Set the deploy wait time in seconds. Node.js will automatically enforce a minimum and maximum wait time.  If the number of seconds is larger than 2147483, less than 1, or not a number, the actual wait time used will be 1 ms."},
    {"getInvokeWaitTime":"Get the invoke wait time in seconds."},
    {"getKeyValStore":"Get the key val store implementation (if any) that is currently associated with this chain. <br/>@returns {KeyValStore} Return the current KeyValStore associated with this chain, or undefined if not set."},
    {"getMember":"Get the user member named 'name' or create a new member if the member does not exist. <br/>@param cb Callback of form 'function(err,Member)'"},
    {"getMemberHelper":"Try to get the member from cache.<br/> If not found, create a new one.<br/> If member is found in the key value store,<br/>    restore the state to the new member, store in cache and return the member.<br/> If there are no errors and member is not found in the key value store,<br/>    return the new member."},
    {"getMemberServices":"Get the member service associated this chain. <br/>@returns {MemberService} Return the current member service, or undefined if not set."},
    {"getName":"Get the chain name. <br/>@returns The name of the chain."},
    {"getPeers":"Get the peers for this chain."},
    {"getRegistrar":"Get the member whose credentials are used to register and enroll other users, or undefined if not set. <br/>@param {Member} The member whose credentials are used to perform registration, or undefined if not set."},
    {"getTCertBatchSize":"Get the tcert batch size."},
    {"getUser":"Get a user. A user is a specific type of member. Another type of member is a peer."},
    {"isDevMode":"Determine if dev mode is enabled."},
    {"isPreFetchMode":"Determine if pre-fetch mode is enabled to prefetch tcerts."},
    {"isSecurityEnabled":"Determine if security is enabled."},
    {"setECDSAModeForGRPC":"Enable or disable ECDSA mode for GRPC."},
    {"setDevMode":"Set dev mode to true or false. setDevMode(boolean)"},
    {"setInvokeWaitTime":"Set the invoke wait time in seconds. <br/>@param secs"},
    {"setKeyValStore":"Set the key value store implementation."},
    {"setMemberServices":"Set the member service associated this chain.  This allows the default implementation of member service to be overridden."},
    {"setMemberServicesUrl":"Set the member services URL <br/>@param {string} url Member services URL of the form: 'grpc://host:port' or 'grpcs://host:port' <br/>@param {GRPCOptions} opts optional GRPC options"},
    {"setPreFetchMode":"Set prefetch mode to true or false. setPreFetchMode(boolean)"},
    {"setRegistrar":"Set the member whose credentials are used to register and enroll other users. <br/>@param {Member} registrar The member whose credentials are used to perform registration."},
    {"setTCertBatchSize":"Set the tcert batch size."}
    ]},
  {"Member":[
    {"enroll":"Enroll the member and return the enrollment results. <br/>@param enrollmentSecret The password or enrollment secret as returned by register. <br/>@param cb Callback to report an error if it occurs"},
    {"deploy":"Issue a deploy request on behalf of this member. <br/>@param deployRequest {Object} <br/>@returns {TransactionContext} Emits 'submitted', 'complete', and 'error' events."},
    {"invoke":"Issue an invoke request on behalf of this member. <br/>@param invokeRequest {Object} <br/>@returns {TransactionContext} Emits 'submitted', 'complete', and 'error' events."},
    {"newTransactionContext":"Create a transaction context with which to issue build, deploy, invoke, or query transactions. Only call this if you want to use the same tcert for multiple transactions. <br/>@param {Object} tcert A transaction certificate from member services.  This is optional. <br/>@returns A transaction context."},
    {"query":"Issue a query request on behalf of this member. <br/>@param queryRequest {Object} <br/>@returns {TransactionContext} Emits 'submitted', 'complete', and 'error' events."},
    {"register":"Register the member. <br/>@param cb Callback of the form: {function(err,enrollmentSecret)}"},
    {"registerAndEnroll":"Perform both registration and enrollment. <br/>@param cb Callback of the form: {function(err,{key,cert,chainKey})}"},
    {"restoreState":"Restore the state of this member from the key value store (if found).  If not found, do nothing. <br/>@param cb Callback of the form: function(err}"},
    {"saveState":"Save the state of this member to the key value store. <br/>@param cb Callback of the form: {function(err}"},
    {"fromString":"Get the current state of this member as a string @return {string} The state of this member as a string"},
    {"toString":"Save the current state of this member as a string @return {string} The state of this member as a string"},
    {"isRegistered":"Determine if this name has been registered. <br/>@returns {boolean} True if registered; otherwise, false."},
    {"isEnrolled":"Determine if this name has been enrolled. <br/>@returns {boolean} True if enrolled; otherwise, false."},
    {"getAffiliation":"Get the affiliation. <br/>@returns {string} The affiliation."},
      {"getChain":"Get the chain. <br/>@returns {Chain} The chain."},
      {"getEnrollment":"et the enrollment info. <br/>@returns {Enrollment} The enrollment."},
      {"getMemberServices":"Get the member services. <br/>@returns {MemberServices} The member services."},
      {"getName":"Get the member name. <br/>@returns {string} The member name."},
      {"getNextTCert":"Get the next available transaction certificate with the appropriate attributes. <br/>@param cb"},
      {"getRoles":"Get the roles. <br/>@returns {string[]} The roles."},
      {"getTCertBatchSize":"Get the transaction certificate (tcert) batch size, which is the number of tcerts retrieved from member services each time (i.e. in a single batch). <br/>@returns The tcert batch size."},
      {"getUserCert":"Get a user certificate. <br/>@param attrs The names of attributes to include in the user certificate. <br/>@param cb A GetTCertCallback"},
      {"setAffiliation":"Set the affiliation. <br/>@param affiliation The affiliation."},
      {"setRoles":"Set the roles. <br/>@param roles {string[]} The roles."},
      {"setTCertBatchSize":"Set the transaction certificate (tcert) batch size. <br/>@param batchSize"}
]},
  {"TransactionContext":[
    {"decryptResult":"<i>No description provided by SDK team</i>"},
    {"deploy":"Issue a deploy transaction. <br/>@param deployRequest {Object} A deploy request of the form: { chaincodeID, payload, metadata, uuid, timestamp, confidentiality: { level, version, nonce }"},
    {"execute":"Execute a transaction"},
    {"emitMyEvent":"Emit a specific event provided an event listener is already registered."},
    {"invoke":"Issue an invoke transaction. <br/>@param invokeRequest {Object} An invoke request of the form: XXX"},
    {"newBuildOrDeployTransaction":"Create a deploy transaction. <br/>@param request {Object} A BuildRequest or DeployRequest"},
    {"newDevModeTransaction":"Create a development mode deploy transaction. <br/>@param request {Object} A development mode BuildRequest or DeployRequest"},
    {"newInvokeOrQueryTransaction":"Create an invoke or query transaction. <br/>@param request {Object} A build or deploy request of the form: { chaincodeID, payload, metadata, uuid, timestamp, confidentiality: { level, version, nonce }"},
    {"newNetModeTransaction":"Create a network mode deploy transaction. <br/>@param request {Object} A network mode BuildRequest or DeployRequest"},
    {"processConfidentiality":"<i>No description provided by SDK team</i>"},
    {"query":"Issue a query transaction. <br/>@param queryRequest {Object} A query request of the form: XXX"},
    {"getAttrs":"Get the attribute names associated"},
      {"getChain":"Get the chain with which this transaction context is associated. <br/>@returns The chain"},
      {"getMember":"Get the member with which this transaction context is associated. <br/>@returns The member"},
      {"getMemberServices":"Get the member services, or undefined if security is not enabled. <br/>@returns The member services"},
      {"getMyTCert":"<i>No description provided by SDK team</i>"},
      {"setAttrs":"Set the attributes for this transaction context."}
      ]},
  {"Peer":[
    {"remove":"Remove the peer from the chain."},
      {"sendTransaction":"Send a transaction to this peer. <br/>@param tx A transaction <br/>@param eventEmitter The event emitte"},
      {"getChain":"Get the chain of which this peer is a member. <br/>@returns {Chain} The chain of which this peer is a member."},
      {"getUrl":"Get the URL of the peer. <br/>@returns {string} Get the URL associated with the peer./"}
]},
  {"EventHub":[
    {"connect":"<i>No description provided by SDK team</i>"},
    {"disconnect":"<i>No description provided by SDK team</i>"},
      {"txCallback":"<i>No description provided by SDK team</i>"},
      {"setPeerAddr":"<i>No description provided by SDK team</i>"},
      {"isconnected":"<i>No description provided by SDK team</i>"},
      {"registerBlockEvent":"<i>No description provided by SDK team</i>"},
      {"registerChaincodeEvent":"<i>No description provided by SDK team</i>"},
      {"registerTxEvent":"<i>No description provided by SDK team</i>"},
      {"unregisterBlockEvent":"<i>No description provided by SDK team</i>"},
      {"unregisterChaincodeEvent":"<i>No description provided by SDK team</i>"},
      {"unregisterTxEvent":"<i>No description provided by SDK team</i>"}
]}
]
}
